---
syntax: go
tags:
  - go
  - golang
  - basic types
---
// Go's basic types are
//  -------------------------------------------------------------------------------------------------------------
// | Type       | Description                                                                         | Size     |
// |------------|-------------------------------------------------------------------------------------|----------|
// | bool       |                                                                                     | 1 byte   |
// |------------|-------------------------------------------------------------------------------------|----------|
// |            |                                                                                     |          |
// |------------|-------------------------------------------------------------------------------------|----------|
// | string     |                                                                                     | 16 bytes |
// |------------|-------------------------------------------------------------------------------------|----------|
// |            |                                                                                     |          |
// |------------|-------------------------------------------------------------------------------------|----------|
// | int        | Either 32 or 64 bits                                                                | 8 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | int8       | The set of all signed  8-bit integers (-128 to 127)                                 | 1 byte   |
// |------------|-------------------------------------------------------------------------------------|----------|
// | int16      | The set of all signed 16-bit integers (-32768 to 32767)                             | 2 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | int32      | The set of all signed 32-bit integers (-2147483648 to 2147483647)                   | 4 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | int64      | The set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807) | 8 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// |            |                                                                                     |          |
// |------------|-------------------------------------------------------------------------------------|----------|
// | uint       | Either 32 or 64 bits                                                                | 8 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | uint8      | The set of all unsigned  8-bit integers (0 to 255)                                  | 1 byte   |
// |------------|-------------------------------------------------------------------------------------|----------|
// | uint16     | The set of all unsigned 16-bit integers (0 to 65535)                                | 2 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | uint32     | The set of all unsigned 32-bit integers (0 to 4294967295)                           | 4 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | uint64     | The set of all unsigned 64-bit integers (0 to 18446744073709551615)                 | 8 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | uintptr    | An unsigned integer large enough to store the uninterpreted bits of a pointer value | 8 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// |            |                                                                                     |          |
// |------------|-------------------------------------------------------------------------------------|----------|
// | byte       | Alias for uint8                                                                     | 1 byte   |
// |------------|-------------------------------------------------------------------------------------|----------|
// | rune       | Alias for int32. Represents a Unicode code point                                    | 4 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// |            |                                                                                     |          |
// |------------|-------------------------------------------------------------------------------------|----------|
// | float32    | The set of all IEEE-754 32-bit floating-point numbers                               | 4 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | float64    | The set of all IEEE-754 64-bit floating-point numbers                               | 8 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// |            |                                                                                     |          |
// |------------|-------------------------------------------------------------------------------------|----------|
// | complex64  | The set of all complex numbers with float32 real and imaginary parts                | 8 bytes  |
// |------------|-------------------------------------------------------------------------------------|----------|
// | complex128 | The set of all complex numbers with float64 real and imaginary parts                | 16 bytes |
//  -------------------------------------------------------------------------------------------------------------

package main

import (
	"fmt"
	"math/cmplx"
)

var (
	ToBe   bool       = false
	MaxInt uint64     = 1<<64 - 1
	z      complex128 = cmplx.Sqrt(-5 + 12i)
)

func main() {
	fmt.Printf("Type: %T Value: %v\n", ToBe, ToBe)
	fmt.Printf("Type: %T Value: %v\n", MaxInt, MaxInt)
	fmt.Printf("Type: %T Value: %v\n", z, z)
}

// The example shows variables of several types, and also that variable declarations may be "factored" into blocks, as with import statements.

// The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. When you need an integer value you should use int unless you have a specific reason to use a sized or unsigned integer type.
